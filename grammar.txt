lang -> expr*
expr -> assign | if_stmt | printing | inputting
assign -> var ((assign_op arif_stmt) | inc_dec) semicolon
arif_stmt -> value (arif_op value)*
value -> var | number | bkt_expr
bkt_expr -> bkt_open arif_stmt bkt_close

printing -> KW_PRINT bkt_open str_stmt bkt_close semicolon
str_stmt -> substr (concat substr)*
substr -> string | arif_stmt

inputting -> KW_INPUT bkt_open var bkt_close semicolon

if_stmt -> KW_IF bkt_open log_stmt bkt_close
                brace_open expr* brace_close [else_stmt]
else_stmt -> KW_ELSE brace_open expr* brace_close

log_stmt -> comp_expr (log_op comp_expr)*
comp_expr -> [log_not] (arif_stmt comp_op arif_stmt)

KW_IF -> 'if'
KW_ELSE -> 'else'
KW_PRINT -> 'print'
KW_INPUT -> 'input'

bkt_open    -> (
bkt_close   -> )
brace_open  -> {
brace_close -> }

inc_dec -> ++ | --
assign_op -> = | -= | += | *= | /= | //=
arif_op -> * | ** | + | - | / | //
comp_op -> < | <= | > | >= | != | ==
log_op  -> 'or' | 'and' | 'xor'
log_not -> 'not'

string -> "[^"]*"
var -> [A-Za-z_][A-Za-z_0-9]*
number -> int | float | bool
int -> -?[0-9]+
float -> -?[0-9]+.[0-9]+
bool -> True | False
semicolon -> ";"
concat -> "."
